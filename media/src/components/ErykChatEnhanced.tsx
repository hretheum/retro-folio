import { useState, useRef, useEffect, useCallback } from 'react';
import { createPortal } from 'react-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Send, 
  Sparkles, 
  X, 
  Loader2, 
  ThumbsUp, 
  ThumbsDown, 
  Copy,
  BarChart3,
  Mic,
  MicOff,
  Pause,
  Play
} from 'lucide-react';
import { MessageRenderer } from './MessageRenderer';
import './ErykChat.css';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  createdAt?: Date;
  isStreaming?: boolean;
  responseTime?: number;
}

interface ErykChatEnhancedProps {
  isOpen?: boolean;
  onClose?: () => void;
  embedded?: boolean;
  enableAnalytics?: boolean;
  enableVoice?: boolean;
  enableStreaming?: boolean;
}

export function ErykChatEnhanced({ 
  isOpen = true, 
  onClose, 
  embedded = false,
  enableAnalytics = false,
  enableVoice = false,
  enableStreaming = true
}: ErykChatEnhancedProps) {
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const abortControllerRef = useRef<AbortController | null>(null);
  
  const [sessionId] = useState(() => `session-${Date.now()}`);
  const [feedbackGiven, setFeedbackGiven] = useState<Record<string, 'helpful' | 'not_helpful'>>({});
  const [showAnalytics, setShowAnalytics] = useState(false);
  const [isVoiceActive, setIsVoiceActive] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'connecting' | 'error'>('connected');
  const [performanceStats, setPerformanceStats] = useState({
    averageResponseTime: 0,
    messagesCount: 0,
    cacheHitRate: 0
  });
  
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 'welcome',
      role: 'assistant',
      content: 'Hi! I\'m Eryk AI. You can ask me about my experience, technology projects, leadership philosophy, or anything else related to my career. How can I help you?\n\n⚠️ **Disclaimer:** I\'m currently powered by completely synthetic data generated by AI for testing purposes. This is not real experience data - we\'re testing our RAG (Retrieval-Augmented Generation) system.',
      createdAt: new Date(),
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  // Enhanced streaming message sender
  const sendMessageWithStreaming = useCallback(async (messageContent: string) => {
    if (!messageContent.trim() || isLoading) return;
    
    const startTime = Date.now();
    const userMessage: Message = {
      id: `user-${Date.now()}`,
      role: 'user',
      content: messageContent,
      createdAt: new Date(),
    };
    
    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    setError(null);
    setConnectionStatus('connecting');
    
    // Create streaming assistant message
    const assistantMessageId = `assistant-${Date.now()}`;
    const initialAssistantMessage: Message = {
      id: assistantMessageId,
      role: 'assistant',
      content: '',
      createdAt: new Date(),
      isStreaming: true,
    };
    
    setMessages(prev => [...prev, initialAssistantMessage]);

    try {
      // Create abort controller for this request
      abortControllerRef.current = new AbortController();
      
      const endpoint = enableStreaming ? '/api/ai/chat-streaming' : '/api/ai/chat-with-llm';
      
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [...messages, userMessage],
          sessionId,
        }),
        signal: abortControllerRef.current.signal,
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      setConnectionStatus('connected');
      
      if (enableStreaming && response.body) {
        // Handle streaming response
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let accumulatedContent = '';
        
        try {
          while (true) {
            const { done, value } = await reader.read();
            
            if (done) break;
            
            const chunk = decoder.decode(value, { stream: true });
            accumulatedContent += chunk;
            
            // Update the streaming message
            setMessages(prev => prev.map(msg => 
              msg.id === assistantMessageId 
                ? { ...msg, content: accumulatedContent }
                : msg
            ));
            
            // Auto-scroll during streaming
            messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
          }
        } finally {
          reader.releaseLock();
        }
        
        // Mark streaming as complete
        setMessages(prev => prev.map(msg => 
          msg.id === assistantMessageId 
            ? { 
                ...msg, 
                isStreaming: false, 
                responseTime: Date.now() - startTime,
                content: accumulatedContent 
              }
            : msg
        ));
      } else {
        // Handle non-streaming response
        const data = await response.json();
        
        setMessages(prev => prev.map(msg => 
          msg.id === assistantMessageId 
            ? { 
                ...msg, 
                content: data.content,
                isStreaming: false,
                responseTime: Date.now() - startTime
              }
            : msg
        ));
      }
      
      // Update performance stats
      const responseTime = Date.now() - startTime;
      setPerformanceStats(prev => ({
        averageResponseTime: (prev.averageResponseTime * prev.messagesCount + responseTime) / (prev.messagesCount + 1),
        messagesCount: prev.messagesCount + 1,
        cacheHitRate: prev.cacheHitRate // This would be updated from server response
      }));
      
    } catch (err) {
      console.error('Chat error:', err);
      
      if (err instanceof Error && err.name === 'AbortError') {
        // Remove the incomplete streaming message
        setMessages(prev => prev.filter(msg => msg.id !== assistantMessageId));
        return;
      }
      
      setError(err instanceof Error ? err : new Error('Unknown error'));
      setConnectionStatus('error');
      
      // Update the message with error state
      setMessages(prev => prev.map(msg => 
        msg.id === assistantMessageId 
          ? { 
              ...msg, 
              content: 'Sorry, an error occurred. Please try again.',
              isStreaming: false
            }
          : msg
      ));
    } finally {
      setIsLoading(false);
      abortControllerRef.current = null;
    }
  }, [messages, sessionId, isLoading, enableStreaming]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await sendMessageWithStreaming(input);
    setInput('');
  };

  // Stop streaming functionality
  const stopStreaming = () => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
  };

  // Voice functionality (placeholder)
  const toggleVoice = () => {
    setIsVoiceActive(!isVoiceActive);
    // Implement speech recognition here
  };

  // Copy message to clipboard
  const copyMessage = async (content: string) => {
    try {
      await navigator.clipboard.writeText(content);
      // Show toast notification (you could implement this)
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);
  
  // Focus input on open
  useEffect(() => {
    if (isOpen) {
      inputRef.current?.focus();
    }
  }, [isOpen]);

  // Handle ESC key to close modal
  useEffect(() => {
    if (!isOpen || embedded || !onClose) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [isOpen, embedded, onClose]);
  
  // Save messages to localStorage
  useEffect(() => {
    if (messages.length > 1) {
      const chatHistory = messages.slice(1); // Skip welcome message
      localStorage.setItem(`eryk-chat-enhanced-${sessionId}`, JSON.stringify(chatHistory));
    }
  }, [messages, sessionId]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
    };
  }, []);
  
  const handleFeedback = async (messageId: string, feedback: 'helpful' | 'not_helpful') => {
    if (feedbackGiven[messageId]) return;
    
    try {
      const response = await fetch('/api/ai/feedback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sessionId, messageId, feedback }),
      });
      
      if (response.ok) {
        setFeedbackGiven(prev => ({ ...prev, [messageId]: feedback }));
      }
    } catch (error) {
      console.error('Failed to submit feedback:', error);
    }
  };
  
  const containerClass = embedded ? 'eryk-chat embedded enhanced' : 'eryk-chat modal enhanced';
  
  const chatContent = (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          className={containerClass}
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.95 }}
          transition={{ duration: 0.2 }}
        >
          <div className="eryk-chat-container">
            {/* Enhanced Header */}
            <div className="eryk-chat-header">
              <div className="flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-blue-400" />
                <h3 className="text-lg font-semibold">Eryk AI</h3>
                <div className={`w-2 h-2 rounded-full ${
                  connectionStatus === 'connected' ? 'bg-green-400' :
                  connectionStatus === 'connecting' ? 'bg-yellow-400 animate-pulse' :
                  'bg-red-400'
                }`} />
              </div>
              
              <div className="flex items-center gap-2">
                {/* Performance stats */}
                {performanceStats.messagesCount > 0 && (
                  <div className="text-xs text-gray-400">
                    ~{Math.round(performanceStats.averageResponseTime)}ms avg
                  </div>
                )}
                
                {/* Analytics button */}
                {enableAnalytics && (
                  <button
                    onClick={() => setShowAnalytics(true)}
                    className="p-1 rounded-lg hover:bg-gray-800 transition-colors"
                    title="View Analytics"
                  >
                    <BarChart3 className="w-4 h-4 text-gray-400" />
                  </button>
                )}
                
                {/* Voice toggle */}
                {enableVoice && (
                  <button
                    onClick={toggleVoice}
                    className={`p-1 rounded-lg hover:bg-gray-800 transition-colors ${
                      isVoiceActive ? 'text-red-400' : 'text-gray-400'
                    }`}
                    title={isVoiceActive ? 'Stop Voice' : 'Start Voice'}
                  >
                    {isVoiceActive ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
                  </button>
                )}
                
                {/* Close button */}
                {!embedded && onClose && (
                  <button
                    onClick={onClose}
                    className="p-1 rounded-lg hover:bg-gray-800 transition-colors"
                    aria-label="Close chat"
                  >
                    <X className="w-5 h-5" />
                  </button>
                )}
              </div>
            </div>
            
            {/* Messages */}
            <div className="eryk-chat-messages">
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                  className={`message ${message.role} ${message.isStreaming ? 'streaming' : ''}`}
                >
                  <div className="message-content">
                    {message.role === 'assistant' && (
                      <Sparkles className={`w-4 h-4 text-blue-400 flex-shrink-0 mt-1 ${
                        message.isStreaming ? 'animate-pulse' : ''
                      }`} />
                    )}
                    <div className="flex-1">
                      <div className="message-text">
                        {message.role === 'assistant' ? (
                          <MessageRenderer 
                            content={message.content} 
                            onPromptClick={(prompt) => {
                              sendMessageWithStreaming(prompt);
                            }}
                          />
                        ) : (
                          message.content
                        )}
                        {message.isStreaming && (
                          <span className="streaming-cursor animate-pulse">|</span>
                        )}
                      </div>
                      
                      {/* Message actions */}
                      <div className="flex items-center gap-2 mt-2">
                        {/* Response time */}
                        {message.responseTime && (
                          <span className="text-xs text-gray-500">
                            {message.responseTime}ms
                          </span>
                        )}
                        
                        {/* Copy button */}
                        <button
                          onClick={() => copyMessage(message.content)}
                          className="p-1 rounded transition-colors text-gray-500 hover:text-gray-300"
                          title="Copy message"
                        >
                          <Copy className="w-3 h-3" />
                        </button>
                        
                        {/* Feedback buttons for assistant messages */}
                        {message.role === 'assistant' && message.id !== 'welcome' && !message.isStreaming && (
                          <>
                            <button
                              onClick={() => handleFeedback(message.id, 'helpful')}
                              className={`p-1 rounded transition-colors ${
                                feedbackGiven[message.id] === 'helpful'
                                  ? 'text-green-400'
                                  : 'text-gray-500 hover:text-gray-300'
                              }`}
                              disabled={!!feedbackGiven[message.id]}
                              aria-label="Helpful"
                            >
                              <ThumbsUp className="w-3 h-3" />
                            </button>
                            <button
                              onClick={() => handleFeedback(message.id, 'not_helpful')}
                              className={`p-1 rounded transition-colors ${
                                feedbackGiven[message.id] === 'not_helpful'
                                  ? 'text-red-400'
                                  : 'text-gray-500 hover:text-gray-300'
                              }`}
                              disabled={!!feedbackGiven[message.id]}
                              aria-label="Not helpful"
                            >
                              <ThumbsDown className="w-3 h-3" />
                            </button>
                            {feedbackGiven[message.id] && (
                              <span className="text-xs text-gray-500 ml-2">
                                Thanks!
                              </span>
                            )}
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
              
              {isLoading && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="message assistant"
                >
                  <div className="message-content">
                    <Sparkles className="w-4 h-4 text-blue-400 flex-shrink-0 mt-1 animate-pulse" />
                    <div className="message-text">
                      <div className="flex items-center gap-2">
                        <Loader2 className="w-4 h-4 animate-spin" />
                        <span>Thinking...</span>
                        {isLoading && (
                          <button
                            onClick={stopStreaming}
                            className="ml-2 p-1 rounded-lg bg-red-500/20 hover:bg-red-500/30 transition-colors"
                            title="Stop generating"
                          >
                            <Pause className="w-3 h-3 text-red-400" />
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}
              
              {error && (
                <div className="message error">
                  <div className="message-content">
                    <div className="message-text text-red-400">
                      <div>Sorry, an error occurred. Please try again later.</div>
                      <div className="text-xs mt-2 opacity-70">
                        Error: {error.message || 'Unknown error'}
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
            
            {/* Enhanced Input */}
            <form onSubmit={handleSubmit} className="eryk-chat-input">
              <input
                ref={inputRef}
                type="text"
                value={input}
                onChange={handleInputChange}
                placeholder="Ask about projects, experience..."
                className="flex-1 px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-lg 
                         text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 
                         transition-colors"
                disabled={isLoading}
              />
              <button
                type="submit"
                disabled={!input.trim() || isLoading}
                className="px-4 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 
                         disabled:opacity-50 disabled:cursor-not-allowed transition-all
                         flex items-center gap-2"
              >
                {isLoading ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  <Send className="w-5 h-5" />
                )}
                <span className="sr-only">Send</span>
              </button>
            </form>
            
            {/* Enhanced Disclaimer */}
            <div className="text-xs text-gray-500 text-center mt-2 flex items-center justify-center gap-2">
              <span>Powered by AI • Responses based on available data</span>
              {enableStreaming && <span>• Real-time streaming</span>}
            </div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
  
  // Use portal for modal to ensure it renders at document root
  if (!embedded && typeof document !== 'undefined') {
    return createPortal(chatContent, document.body);
  }
  
  return chatContent;
}